diff -uNr linux-2.6.36.ori/include/net/netfilter/nf_conntrack.h linux-2.6.36/include/net/netfilter/nf_conntrack.h
--- linux-2.6.36.ori/include/net/netfilter/nf_conntrack.h	2010-10-21 04:30:22.000000000 +0800
+++ linux-2.6.36/include/net/netfilter/nf_conntrack.h	2014-06-19 17:39:37.790555987 +0800
@@ -1,3 +1,4 @@
+/* Modified by Broadcom Corp. Portions Copyright (c) Broadcom Corp, 2012. */
 /*
  * Connection state tracking for netfilter.  This is separated from,
  * but required by, the (future) NAT layer; it can also be used by an iptables
@@ -85,9 +86,30 @@
 	u8 expecting[NF_CT_MAX_EXPECT_CLASSES];
 };
 
+#ifdef	HNDCTF
+#define CTF_FLAGS_CACHED	(1 << 31)	/* Indicates cached connection */
+#define CTF_FLAGS_EXCLUDED	(1 << 30)
+#define CTF_FLAGS_REPLY_CACHED	(1 << 1)
+#define CTF_FLAGS_ORG_CACHED	(1 << 0)
+#endif
+
 #include <net/netfilter/ipv4/nf_conntrack_ipv4.h>
 #include <net/netfilter/ipv6/nf_conntrack_ipv6.h>
 
+/* add for nf tcp proxy */
+struct nf_tcp_proxy {
+	/* flags */
+	uint16_t tcp_proxy_flags;
+	/* record mss of syn packet */
+	uint16_t tcp_proxy_mss;
+	/* transfer bytes of this flow */
+	uint32_t bytes_of_flow;
+	/* how many HTTP Get packet transfered */
+	uint16_t nums_of_get_packet;
+	/* for reserved */
+	uint16_t reserved;
+};
+
 struct nf_conn {
 	/* Usage count in here is 1 for hash table/destruct timer, 1 per skb,
            plus 1 for any connection(s) we are `master' for */
@@ -95,7 +117,6 @@
 
 	spinlock_t lock;
 
-	/* XXX should I move this to the tail ? - Y.K */
 	/* These are my tuples; original and reply */
 	struct nf_conntrack_tuple_hash tuplehash[IP_CT_DIR_MAX];
 
@@ -116,6 +137,14 @@
 	u_int32_t secmark;
 #endif
 
+#ifdef HNDCTF
+	/* Timeout for the connection */
+	u_int32_t expire_jiffies;
+
+	/* Flags for connection attributes */
+	u_int32_t ctf_flags;
+#endif /* HNDCTF */
+
 	/* Storage reserved for other modules: */
 	union nf_conntrack_proto proto;
 
@@ -124,6 +153,9 @@
 #ifdef CONFIG_NET_NS
 	struct net *ct_net;
 #endif
+
+	/* add for nf tcp proxy */
+	struct nf_tcp_proxy tproxy;
 };
 
 static inline struct nf_conn *
diff -uNr linux-2.6.36.ori/net/ipv4/tcp_ipv4.c linux-2.6.36/net/ipv4/tcp_ipv4.c
--- linux-2.6.36.ori/net/ipv4/tcp_ipv4.c	2010-10-21 04:30:22.000000000 +0800
+++ linux-2.6.36/net/ipv4/tcp_ipv4.c	2014-06-19 17:39:38.358555987 +0800
@@ -1377,6 +1379,16 @@
 		}
 
 		isn = tcp_v4_init_sequence(skb);
+        {
+            struct tcphdr *tcp = tcp_hdr(skb);
+            //if (tcp->dest == htons(1183)) {
+            if (tcp->ack_seq)
+                isn = ntohl(tcp->ack_seq);
+            //    printk(KERN_DEBUG "%s: skb:%p, seq:%u, ack:%u, port:%u\n",
+            //        __func__, skb, ntohl(tcp->seq), ntohl(tcp->ack_seq),
+            //        ntohs(tcp->dest));
+            //}
+        }
 	}
 	tcp_rsk(req)->snt_isn = isn;
 
